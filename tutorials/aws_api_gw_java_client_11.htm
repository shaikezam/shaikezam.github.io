<hr>
<h2>Websocket channel between AWS API Gateway & Java Client (Using Java 11 WebSocket API)</h2>
<i>01-06-2022 - Shai Zambrovski</i>
<hr>
<div class="text">
    <h3>What is it Websocket</h3>
    <p>A communication protocol in which provide full duplex (bi-directional) communication channels over a single TCP
        connection.</p>
    <p>The WebSocket protocol enables interaction between a web browser (or other client application) and a web server.
    </p>
    <h4>Our solution</h4>
    <p>We will try to establish a <code>websocket</code> channel between machine to machine using (<code>Java</code>
        client to <code>AWS API Gateway</code> as a server).</p>
    <p>An example for this kind of scenario is a <code>websocket</code> channel between on-premise machine (client) to
        SaaS application (server).</p>
    <img src="/style/websocket.png"><br>
    <h3>AWS API Gateway</h3>
    <h4>What is it API (Application Programming Interface) Gateway</h4>
    <p>Traditionally, a web client will communicate directly with the server that is serving the request. With the
        adoption of the microservice pattern, the simplest approach would be to let client applications communicate
        directly with our microservices.</p>
    <p>An API gateway is an infrastructure layer that sits in front of your backend services. Its purpose is to serve
        requests from the client by routing it to the right backend service.</p>
    <p>In plain terms, API Gateway is enhanced reverse proxy with more advanced capabilities including orchestration and
        added security and monitoring capabilities.</p>
    <img src="/style/api-gateway-1.png"><br>
    <h4>Create Websocket server using AWS API Gateway</h4>
    <ul>
        <li>First, we will nevigate to the API GW page with the relevant region (i.g. us-east-1) - <a
                href="https://us-east-1.console.aws.amazon.com/apigateway">https://us-east-1.console.aws.amazon.com/apigateway.</a>
        </li>
        <li>Next, we will click the button <code>Create API</code> and choose Websocket API:</li>
        <img src="/style/awsapigw/1.png" class="center-img"><br>
        <img src="/style/websocket-aws-api-gw/1.png" class="center-img"><br>
        <li>Then, we will give the API a nam (i.g. Java 11 websocket).</li>
        <li>We need to give a route selection expression because API Gateway need to know which route to call when a
            client sends a message.</li>
        <img src="/style/websocket-aws-api-gw/2.png" class="center-img"><br>
        <li>Next, we will define three routes:
            <ul>
                <li>Connect: what we will do when the AWS API GW get a connect request.</li>
                <li>Disconnect: what we will do when the AWS API GW get a disconnectrequest.</li>
                <li>Custom route: what we will do when the AWS API GW get a request which matches the action we specify
                    in previous screen.</li>
            </ul>
            <img src="/style/websocket-aws-api-gw/3.png" class="center-img"><br>
        </li>
        <li>For this, we will create 4 new <code>AWS Lambda function</code>:</li>
        <li>Connect Lambda & Disconnect Lambda (nothing special, just print to logs)</li>
        <div id="awsapigwwebsocket1">
            <script type="text/javascript">
                $(function () {
                    postscribe('#awsapigwwebsocket1', '<script src="https://gist.github.com/shaikezam/60d3078dd2a0dfdc8c0438534551fc24.js"><\/script>');
                });
            </script>
        </div>
        <li>sendToServer Lambda: (we will have the connectionId so we know to which client\seesion to respond back):</li>
        <div id="awsapigwwebsocket2">
            <script type="text/javascript">
                $(function () {
                    postscribe('#awsapigwwebsocket2', '<script src="https://gist.github.com/shaikezam/4fd35232cf721b9a395c124e552203a1.js"><\/script>');
                });
            </script>
        </div>
        <li>Broadcast Lambda</li>
    </ul>
    <h3>What is it Java 11 WebSocket API</h3>
    <p>Until Java <code>SE 11 &amp; JDK 11</code> release, there was many <code>Websocket </code>implementations
        (Spring, Tomcat, tyrus and many more).</p>
    <p>For this tutorial, we use the Java 11 Websocket simple &amp; pure implementation.</p>
    <p>We will build a Spring Boot app that contains the Websocket client that will communicate with the AWS AP
        GW.</p>
</div>