<hr>
<h2>Handling Properties</h2>
<i>22-12-2019 - Shai Zambrovski</i>
<hr>
<div class="text">
    Must of Java application need to use with key/value pairs for persist configuration metadata, user information or
    any data that related to a program or
    application.<br>
    So we need to have am intuitive way to manage key/value mechanism to:
    <ul>
        <li>set or get values.</li>
        <li>Set default value for non-exist pairs.</li>
    </ul>
    for this, Java provides us the <code>java.util.Properties</code> class that manage the key/value pair as a
    String.<br>
    The <code>Properties</code> class provides us basically two methods:<br>
    <ul>
        <li><code>setProperty</code>Set value (create or modify) to a specific key.</li>
        <li><code>getProperty</code>Get the value of a specific key; <code>null</code> is returned if key doesn't
            exists, unless we provide default value.</li>
    </ul>
    <div id="properties1">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties1', '<script src="https://gist.github.com/shaikezam/f3a5cd4e5cd9ca61821ae3bab3d64d9f.js"><\/script>');
            });
        </script>
    </div>
    So how we can persist those properties?<br>
    Using streams we can basically persist two types of properties files format; <code>.properties</code> and
    <code>.xml</code> files.<br>
    <h3><code>.properties</code> format</h3>
    <ul>
        <li>Can be handled with <code>outputStream</code> & <code>inputStream</code> (if we work with bytes) or
            <code>reader</code> & <code>writer</code> (if we work with characters).<br>
        </li>
        <li>Key/value separated with <code>:</code> or <code>=</code>.<br></li>
        <li>Comments starts with <code>#</code> or <code>!</code>.<br></li>
    </ul>
    <h4>Write to <code>.properties</code> file:</h4>
    <div id="properties2">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties2', '<script src="https://gist.github.com/shaikezam/5db75793d53d84e76ca8256e09eec354.js"><\/script>');
            });
        </script>
    </div>
    <code>courses.properties</code> file:
    <div id="properties3">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties3', '<script src="https://gist.github.com/shaikezam/3f85f5ad89200ccd4a12b21a7f0db54a.js"><\/script>');
            });
        </script>
    </div>
    <h4>Read from <code>.properties</code> file:</h4>
    <div id="properties4">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties4', '<script src="https://gist.github.com/shaikezam/89e239337ed8b9584287699ef0e391e1.js"><\/script>');
            });
        </script>
    </div>
    <h3><code>.xml</code> format</h3>
    <ul>
        <li>Can be handled only with <code>outputStream</code> & <code>inputStream</code>.<br></li>
        <li>Key will persisted as a key attribute and value will persisted as an element value.<br></li>
        <li>Comments will persisted as an element.<br></li>
    </ul>
    <h4>Write to <code>.xml</code> file:</h4>
    <div id="properties5">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties5', '<script src="https://gist.github.com/shaikezam/6a2bd16c95adbff6e808561ca3634fdf.js"><\/script>');
            });
        </script>
    </div>
    <code>courses.xml</code> file:
    <div id="properties6">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties6', '<script src="https://gist.github.com/shaikezam/b500209745d515afb641ac4ed3954766.js"><\/script>');
            });
        </script>
    </div>
    <h4>Read from <code>.xml</code> file:</h4>
    <div id="properties7">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties7', '<script src="https://gist.github.com/shaikezam/c3c445644c3f8b4deeab93674ff5705b.js"><\/script>');
            });
        </script>
    </div>
    <h3>Default Properties mechanism</h3>
    In some cases and scenarios we want to have a default values to provide an abstraction for some configurations.<br>
    To achive such feature, we can pass to the <code>Properties</code> constructor a <code>Properties</code>
    instance that will supply a default values for a keys that doesn't exists in the current <code>Properties</code>
    instance.<br>
    <div id="properties8">
        <script type="text/javascript">
            $(function () {
                postscribe('#properties8', '<script src="https://gist.github.com/shaikezam/446f51adb589b9534bbd690b672e3ab1.js"><\/script>');
            });
        </script>
    </div>
</div>