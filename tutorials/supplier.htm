<hr>
<h2>Supplier Java 8 API</h2>
<i>26-01-2022 - Shai Zambrovski</i>
<hr>
<div class="text">
    <h3>Functional Interfaces</h3>
    <h4>Before Java 8</h4>
    <p>As an Object-Oriented Programming language, <code>Java</code> has declared almost everthing in the
        <code>Object</code> model (except for some of the primitive data types and primitive methods).
    </p>
    <p>Functions in Java were only a part of a class and to use them we need to use the <code>Class</code> or to
        create an instance of it.</p>
    <h4>From Java 8 onwards</h4>
    <p>Since <code>Java</code> 8, <code>Java</code> brought us the interface <code>FunctionalInterface</code>:</p>
    <p>Conceptually, a functional interface has exactly one abstract method, however, they can include any quantity of
        default and static methods.</p>
    <p>Note that instances of functional interfaces can be created with:</p>
    <ul>
        <li>Lambda expressions.</li>
        <li>Method references</li>
        <li>Constructor references.</li>
    </ul>
    <p>The purpose of <code>FunctionalInterface</code> is to make code more readable, clean, and straightforward.</p>
    <p>There are many types of <code>FunctionalInterface</code>; <code>Runnable</code>, <code>Callable</code> and so on.
    </p>
    <p>In this tutorial we will learn about the <code>Supplier</code> <code>FunctionalInterface</code>.
    </p>
    <h3>Supplier interface</h3>
    A <code>FunctionalInterface</code> that can be used when creating <code>lambda expressions</code>,
    <code>method references</code> or <code>constructor references</code>, in which accepts no arguments and returns a
    result.
    <p>The <code>Supplier FunctionalInterface</code> has only one method named <code>get()</code> and it isn't chainable
    </p>
    <ul>
        <li><code>Supplier</code> by method references:</li>
        <div id="supplier1">
            <script type="text/javascript">
                $(function () {
                    postscribe('#supplier1', '<script src="https://gist.github.com/shaikezam/f481606de919dfee8f03da38ab5a4522.js"><\/script>');
                });
            </script>
        </div>
        <li><code>Supplier</code> by lambda expreeion:</li>
        <div id="supplier2">
            <script type="text/javascript">
                $(function () {
                    postscribe('#supplier2', '<script src="https://gist.github.com/shaikezam/4a5e07def98e97e7851b3eb71c3c62b7.js"><\/script>');
                });
            </script>
        </div>
        <li><code>Supplier</code> by constructor references:</li>
        <div id="supplier3">
            <script type="text/javascript">
                $(function () {
                    postscribe('#supplier3', '<script src="https://gist.github.com/shaikezam/71b70ed06156e8e4ef3030475c22a0a1.js"><\/script>');
                });
            </script>
        </div>
    </ul>
    <p>For all above examples, the output will be <code>Hello shaikezam.com</code>.</p>
</div>