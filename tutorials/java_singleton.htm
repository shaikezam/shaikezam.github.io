<hr>
<h2>Singleton in Java</h2>
<i>18-01-2022 - Shai Zambrovski</i>
<hr>
<div class="text">
    <h3>What is it Singleton design pattern?</h3>
    <p>Singleton is a <code>creational design pattern</code> in which restricts the creation of an object to only one
        instance.</p>
    <p>In most implementations, a hidden constructor - declared <code>private</code> - ensures that the class can never
        be instantiated from outside the class.</p>
    <p>We will use the singleton design pattern &nbsp;when it&rsquo;s not necessary to have many instances of the same
        object, spending memory to do something that a single instance can do.</p>
    <p>This tutorial is not related to the <code>Spring</code> bean deafult scope - singleton (in which it's singleton
        per application context)</p>
    <h3>Eager Singleton classs initialization</h3>
    <p>The simple singleton java implementation.</p>
    <p>The object's instance is created while the class is loading, which leads to some drawbacks:</p>
    <ul>
        <li>If we will not use the Object, it still will be created even if the application will not use it which can
            leads to waste of resources.</li>
        <li>There isn't really error handling or any exceptions handling in this approach.</li>
    </ul>
    <div id="singleton_1">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_1', '<script src="https://gist.github.com/shaikezam/802a3623ce289f70e47f7e0af4c155ff.js"><\/script>');
            });
        </script>
    </div>
    <h3>Singleton classs initialization through static block</h3>
    <p>Similar to the above implementation except that it can have an exception handling (be aware that it also created
        even if the application will not use it, i.e. it will create in the class loading).</p>
    <div id="singleton_2">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_2', '<script src="https://gist.github.com/shaikezam/031ba327f76bba3fc5adc1dff19ca5a4.js"><\/script>');
            });
        </script>
    </div>
    <h3>Lazy Singleton classs initialization</h3>
    <p>In this approce, we now can handle the exceptions handling and the Object's instance will be create when we will
        call in the 1st time we call to the <code>getInstance()</code> method.</p>
    <p>This will work great in a <code>single-thread</code> environment, when we will run in
        <code>multi-thread </code>environment, we will have some issue that the Object's instance can be created twice
        (or more) if multiple threads will be inside the <code>if</code> statement.
    </p>
    <p>That's means that the singleton approach will be broken.</p>
    <div id="singleton_3">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_3', '<script src="https://gist.github.com/shaikezam/93be6bc9dea4975bc2c8bb9fed16daec.js"><\/script>');
            });
        </script>
    </div>
    <h3>Thread safe Singleton classs initialization</h3>
    <p>We can wrap the <code>getInstance()</code> method with the <code>synchronized</code> keyword, to enable it to be
        thread safe (only 1 thread can execute this method).</p>
    <p>The implementation will work great but with one disadvantage:<br />Because only 1 thread can access the
        <code>getInstance()</code> method we have created a performance issue in here, in case a lot of threads want to
        get the Object's instance, they will have to wait for no reasone as the Object already has been created already.
    </p>
    <div id="singleton_4">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_4', '<script src="https://gist.github.com/shaikezam/f260a3b9480c97caa4940f1c02cf58ed.js"><\/script>');
            });
        </script>
    </div>
    <h3>Double Checked Thread safe Singleton classs initialization</h3>
    <p>The solution for this will be Double Check Singleton.</p>
    <p>We will set the thread safe mechanism only in the 2nd if statement, so anyone who need the Object's instance (and
        it already been created) do not need to wait.</p>
    <div id="singleton_5">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_5', '<script src="https://gist.github.com/shaikezam/c8cff5da934888e4c45806148db27e33.js"><\/script>');
            });
        </script>
    </div>
    <h3>The Reflection problem</h3>
    <p>Well, it does not really a problem, but all above solutions are not relevant in case we create another instance
        via the reflection's <code>getDeclaredConstructors</code> API and set it's accessible to <code>true</code>.</p>
    <p>In order to solve it, we can create singleton using <code>Enum</code>.</p>
    <h3>Singleton classs initialization through Enum</h3>
    <p>Enum in jave are created only once in the application, also, Java <code>Enum </code>does not allow lazy
        initialization.</p>
    <div id="singleton_6">
        <script type="text/javascript">
            $(function () {
                postscribe('#singleton_6', '<script src="https://gist.github.com/shaikezam/9ab94ac6963b1de3893b4ac27c05b134.js"><\/script>');
            });
        </script>
    </div>
</div>