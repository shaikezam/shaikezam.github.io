<hr>
<h2>Lock Interface</h2>
<i>01-12-2021 - Shai Zambrovski</i>
<hr>
<div class="text">
    <p>The <code>Lock</code> interface (unlike the <code>synchronized</code> mechanism), provides us an implementations
        to handle in more sophisticated way with concurrency issues.</p>
    <p>The Lock interface has several methods:</p>
    <ol>
        <li><code>void lock()</code> - Acquires the lock, if the lock is not available then the current thread becomes
            disabled for thread scheduling purposes and lies dormant until the lock has been acquired.</li>
        <li><code>void lockInterruptibly() throws InterruptedExceptionlockInterruptibly()</code> - This method acquires
            the lock if the block is free while allowing for the thread to be interrupted by some other thread while
            acquiring the lock and return immediately without acquiring the lock.</li>
        <li><code>boolean tryLock()</code> - Acquires the lock if it is available and returns immediately with the value
            <code>true</code>, If the lock is not available then this method will return immediately with the value
            <code>false</code>.</li>
        <li><code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code> -&nbsp; Same as above and
            waits for a certain time period as defined by arguments.</li>
        <li><code>void unlock()</code> - Releases the lock.</li>
    </ol>
    <p>There are some key differences between the <code>Lock</code> interface and the <code>synchronized</code> keyword:
    </p>
    <ul>
        <li>It is possible to set timeout while wating the Lock to be release</li>
        <li>It is not possible to interrupt the <code>synchronized</code> block, while using the
            <code>lockInterruptibly</code> can interrupt the current worker thread.</li>
        <li><code>synchronized</code> block must be handled in single method, while <code>Lock\Unlock</code> can be
            handled in seperate methods.</li>
    </ul>
    <p>We always unlocked the lock object to avoid deadlocks.</p>
    <p>A recommended way to achieve it; call to <code>lock</code> in the <code>try</code> clause and call to
        <code>unlock</code> in the <code>finally</code> clause.</p>
    <h3><code>Lock</code> implementations&nbsp;</h3>
    <h4>ReentrantLock</h4>
    <p><code>Lock</code> Implementations that's provides synchronization to methods while accessing shared resources.
    </p>
    <p>As the name suggest, <code>ReentrantLock</code> can enter the shared resources more then once.</p>
    <p>every time it lock, an internal counter increament by 1 and each time it unlock, the counter will decreace by 1.
    </p>
    <p>Once the internal counter set to 0 (by calling to unlock), the shared reasorce is free to be locked by any other
        thread.</p>
    <div id="locks1">
        <script type="text/javascript">
            $(function () {
                postscribe('#locks1', '<script src="https://gist.github.com/shaikezam/089d7fa546d442ce0a7e8a036af7e90f.js"><\/script>');
            });
        </script>
    </div>
    <p>There are some drawbacks regarding this scenario.</p>
    <p>The read oporations doesn't need to be thread safe (unless we write in the same time), that can cause some
        performance issues.</p>
    <h4>ReentrantReadWriteLock</h4>
    <p>ReentrantReadWriteLock implements the ReadWriteLock interface with the methods:</p>
    <ol>
        <li><code>Lock readLock()</code> - Returns the lock used for reading.</li>
        <li><code>Lock writeLock()</code> - Returns the lock used for writing.</li>
    </ol>
    <p>A <code>ReadWriteLock</code> maintains a pair of associated locks, one for read-only operations and one for
        writing.</p>
    <p>The <code>readLock</code> may be held simultaneously by multiple reader threads, so long as there are no writers.
    </p>
    <p>The <code>writeLock</code> is exclusive.</p>
    <div id="locks2">
        <script type="text/javascript">
            $(function () {
                postscribe('#locks2', '<script src="https://gist.github.com/shaikezam/1c6097d034eb777f03696bdcf09314d0.js"><\/script>');
            });
        </script>
    </div>
</div>