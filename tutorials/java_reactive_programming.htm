<hr>
<h2>Java Reactive Programming</h2>
<i>28-02-2022 - Shai Zambrovski</i>
<hr>
<div class="text">
    <h3>Motivation</h3>
    <p>Before we will deep dive to the world of <code>Java Reactive Programming</code>, let's understand what it's
        different from the
        classic programming paradigms.</p>
    <p>To make it simple, let's take an example:</p>
    <p>Imagine we have a web server that's accepts web request, this server managed number of working threads that's
        responsible to execute some code.</p>
    <p>Things get more completed in the micro services architecture; imagine we have two servers, and the first execute
        a request to second who need to preform a DB query, this could take some time and the two threads, from both
        services are blocked, this is simple a synchronized blocking programming.</p>
    <img src="/style/sync_blocking.png" class="center-img"><br>
    <p>We can overcome this issue by:</p>
    <ul>
        <li>Using a <code>Thread Pool</code> however this isn't really scalable and can take some resources.</li>
        <li>We can replicate the services using different technologies (<code>Docker Swarm</code> \ <code>K8s</code>) to
            handle all the requests, but again this can take
            a lot of resources.</li>
    </ul>
    <h4>Reactive Stream Specification - The solution</h4>
    <blockquote>
        <p>Reactive Streams is an initiative to provide a standard for asynchronous stream processing with non-blocking
            back pressure. This encompasses efforts aimed at runtime environments (JVM and JavaScript) as well as
            network protocols.</p>
    </blockquote>
    <p>Just as Java has specifications (such as <code>JPA</code>) this specification is for reactive streams.</p>
    <p>The <code>Reactive Stream</code> using the observer pattern by using 4 interfaces:</p>
    <ol>
        <li><code>Publisher</code> - provider of a potentially unbounded number of sequenced elements, publishing them
            according to the demand received from its <code>Subscriber</code>(s).</li>
        <li><code>Subscriber</code> - follow the Publisher and receavie data using the <code>Subscription</code>.</li>
        <li><code>Subscription</code> - represents a one-to-one lifecycle of a Subscriber subscribing to a
            <code>Publisher</code>.
        </li>
        <li><code>Processor</code> - can acts as both <code>Publisher</code> &amp; <code>Subscriber</code>.</li>
    </ol>
    <h4>Reactive Programming</h4>
    <p>A declarative / functional programming paradigm related to event driven, async non-bloking programming.</p>
    <p>In this tutorial we will deep dive into the <code>Reactor</code> implementation.</p>
    <h3>Classic <code>Java</code> vs <code>Stream</code> vs <code>Reactor</code></h3>
    <table class="table table-bordered">
        <tbody>
            <tr>
                <td>&nbsp;</td>
                <td><b>0 .. 1</b></td>
                <td><b>0 .. N</b></td>
            </tr>
            <tr>
                <td><b>Java</b></td>
                <td>User / null</td>
                <td>Collection&lt;User&gt;</td>
            </tr>
            <tr>
                <td><b>Java Stream</b></td>
                <td>Optional&lt;User&gt;</td>
                <td>Stream&lt;User&gt;</td>
            </tr>
            <tr>
                <td><b>Reactor</b></td>
                <td>Mono&lt;User&gt;</td>
                <td>Flux&lt;User&gt;</td>
            </tr>
        </tbody>
    </table>
    <h3>Mono</h3>
    <p>A <code>Publisher</code> implementation who can emits 0 or 1 element.</p>
</div>